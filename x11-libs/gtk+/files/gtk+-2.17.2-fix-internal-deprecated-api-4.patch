From 3bf1c7adadb1fda69e63fc6fe0f3698d937a1b80 Mon Sep 17 00:00:00 2001
From: Matthias Clasen <mclasen@redhat.com>
Date: Tue, 16 Jun 2009 16:37:33 +0000
Subject: More uses of the get_cell_renderers functions

---
diff --git a/gtk/tests/builder.c b/gtk/tests/builder.c
index 3dbf40d..224660d 100644
--- a/gtk/tests/builder.c
+++ b/gtk/tests/builder.c
@@ -1147,7 +1147,7 @@ test_treeview_column (void)
   g_assert (GTK_IS_TREE_VIEW_COLUMN (column));
   g_assert (strcmp (gtk_tree_view_column_get_title (column), "Test") == 0);
 
-  renderers = gtk_tree_view_column_get_cell_renderers (column);
+  renderers = gtk_cell_layout_get_cells (GTK_CELL_LAYOUT (column));
   g_assert (g_list_length (renderers) == 1);
   renderer = g_list_nth_data (renderers, 0);
   g_assert (renderer);
@@ -1423,7 +1423,7 @@ test_cell_view (void)
   path = gtk_tree_path_new_first ();
   gtk_cell_view_set_displayed_row (GTK_CELL_VIEW (cellview), path);
   
-  renderers = gtk_cell_view_get_cell_renderers (GTK_CELL_VIEW (cellview));
+  renderers = gtk_cell_layout_get_cells (GTK_CELL_LAYOUT (cellview));
   g_assert (renderers);
   g_assert (g_list_length (renderers) == 1);
   
diff --git a/gtk/tests/treeview-scrolling.c b/gtk/tests/treeview-scrolling.c
index 5ee24c1..0207dbc 100644
--- a/gtk/tests/treeview-scrolling.c
+++ b/gtk/tests/treeview-scrolling.c
@@ -728,7 +728,7 @@ scroll_new_row (ScrollFixture *fixture,
 
 	/* Set up a signal handler to acquire the editable widget */
 	column = gtk_tree_view_get_column (GTK_TREE_VIEW (fixture->tree_view), 0);
-	renderers = gtk_tree_view_column_get_cell_renderers (column);
+	renderers = gtk_cell_layout_get_cells (GTK_CELL_LAYOUT (column));
 
 	g_signal_connect (G_OBJECT (renderers->data), "editing-started",
 			  G_CALLBACK (scroll_new_row_editing_started),
diff --git a/modules/other/gail/gailtreeview.c b/modules/other/gail/gailtreeview.c
index 3cdde65..d305ae0 100644
--- a/modules/other/gail/gailtreeview.c
+++ b/modules/other/gail/gailtreeview.c
@@ -2127,7 +2127,7 @@ gail_tree_view_get_cell_area (GailCellParent *parent,
           GtkCellRenderer *renderer;
 
 	  cell_index = atk_object_get_index_in_parent (ATK_OBJECT (cell));
-	  renderers = gtk_tree_view_column_get_cell_renderers (tv_col);
+	  renderers = gtk_cel_layout_get_cells (GTK_CELL_LAYOUT (tv_col));
 	  renderer = g_list_nth_data (renderers, cell_index);
 
 	  found = gtk_tree_view_column_cell_get_position (tv_col, renderer, &cell_start, &cell_width);
@@ -2180,7 +2180,7 @@ gail_tree_view_grab_cell_focus  (GailCellParent *parent,
        */
       GList *renderers;
 
-      renderers = gtk_tree_view_column_get_cell_renderers (tv_col);
+      renderers = gtk_cell_layout_get_cells (GTK_CELL_LAYOUT (tv_col));
       if (cell_info->in_use) {
 	  index = atk_object_get_index_in_parent (cell_object);
 	  renderer = g_list_nth_data (renderers, index);
@@ -3177,7 +3177,7 @@ update_cell_value (GailRendererCell *renderer_cell,
       gtk_tree_view_column_cell_set_cell_data (cell_info->cell_col_ref,
                                   tree_model, &iter, is_expander, is_expanded);
     }
-  renderers = gtk_tree_view_column_get_cell_renderers (cell_info->cell_col_ref);
+  renderers = gtk_cell_layout_get_cells (GKT_CELL_LAYOUT (cell_info->cell_col_ref));
   gail_return_val_if_fail (renderers, FALSE);
 
   /*
@@ -4001,7 +4001,7 @@ toggle_cell_toggled (GailCell *cell)
   gail_return_if_fail (path);
   pathstring = gtk_tree_path_to_string (path);
 
-  renderers = gtk_tree_view_column_get_cell_renderers (cell_info->cell_col_ref);
+  renderers = gtk_cell_layout_get_cells (GTK_CELL_LAYOUT (cell_info->cell_col_ref));
   gail_return_if_fail (renderers);
 
   /* 
--
cgit v0.8.2

